Index: app/src/main/java/com/app/gmao_machines/ui/components/SignInContent.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.app.gmao_machines.ui.components\r\n\r\nimport androidx.compose.animation.AnimatedVisibility\r\nimport androidx.compose.animation.core.*\r\nimport androidx.compose.animation.expandVertically\r\nimport androidx.compose.animation.fadeIn\r\nimport androidx.compose.foundation.BorderStroke\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.border\r\nimport androidx.compose.foundation.clickable\r\nimport androidx.compose.foundation.layout.*\r\nimport androidx.compose.foundation.shape.CircleShape\r\nimport androidx.compose.foundation.shape.RoundedCornerShape\r\nimport androidx.compose.foundation.text.KeyboardOptions\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.filled.*\r\nimport androidx.compose.material.icons.outlined.CheckCircle\r\nimport androidx.compose.material.icons.outlined.Info\r\nimport androidx.compose.material3.*\r\nimport androidx.compose.runtime.*\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.draw.clip\r\nimport androidx.compose.ui.graphics.Brush\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.res.painterResource\r\nimport androidx.compose.ui.text.font.FontWeight\r\nimport androidx.compose.ui.text.input.*\r\nimport androidx.compose.ui.text.style.TextAlign\r\nimport androidx.compose.ui.unit.dp\r\nimport com.app.gmao_machines.R\r\nimport com.app.gmao_machines.ui.viewModel.AuthViewModel\r\n\r\n@OptIn(ExperimentalMaterial3Api::class)\r\n@Composable\r\nfun SignInContent(\r\n    viewModel: AuthViewModel,\r\n    onGoogleSignIn: () -> Unit,\r\n    onRegisterClick: () -> Unit = {}\r\n) {\r\n    val email = viewModel.email.collectAsState()\r\n    val password = viewModel.password.collectAsState()\r\n    val passwordVisible = viewModel.passwordVisible.collectAsState()\r\n\r\n    // Create animated states\r\n    val animationProgress = remember { Animatable(0f) }\r\n    LaunchedEffect(Unit) {\r\n        animationProgress.animateTo(\r\n            targetValue = 1f,\r\n            animationSpec = tween(durationMillis = 1000, easing = EaseOutQuart)\r\n        )\r\n    }\r\n\r\n    // Email validation state\r\n    val isEmailValid = email.value.contains(\"@\") && email.value.contains(\".\")\r\n\r\n    Box {\r\n        Column(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .padding(horizontal = 24.dp),\r\n            horizontalAlignment = Alignment.CenterHorizontally\r\n        ) {\r\n            Spacer(modifier = Modifier.height(48.dp))\r\n\r\n            // Logo placeholder (can be replaced with actual logo)\r\n            Box(\r\n                modifier = Modifier\r\n                    .size(80.dp)\r\n                    .clip(CircleShape)\r\n                    .background(MaterialTheme.colorScheme.primaryContainer),\r\n                contentAlignment = Alignment.Center\r\n            ) {\r\n                Icon(\r\n                    imageVector = Icons.Default.Lock,\r\n                    contentDescription = \"App Logo\",\r\n                    tint = MaterialTheme.colorScheme.primary,\r\n                    modifier = Modifier.size(40.dp)\r\n                )\r\n            }\r\n\r\n            Spacer(modifier = Modifier.height(24.dp))\r\n\r\n            // Welcome Text with animation\r\n            Text(\r\n                text = \"Welcome Back\",\r\n                style = MaterialTheme.typography.headlineMedium.copy(\r\n                    fontWeight = FontWeight.Bold\r\n                ),\r\n                color = MaterialTheme.colorScheme.primary,\r\n                modifier = Modifier\r\n                    .fillMaxWidth()\r\n                    .padding(top = 8.dp),\r\n                textAlign = TextAlign.Center\r\n            )\r\n\r\n            Text(\r\n                text = \"Sign in to continue\",\r\n                style = MaterialTheme.typography.bodyLarge,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                modifier = Modifier.padding(top = 8.dp, bottom = 32.dp),\r\n                textAlign = TextAlign.Center\r\n            )\r\n\r\n            // Email field with validation\r\n            OutlinedTextField(\r\n                value = email.value,\r\n                onValueChange = { viewModel.updateEmail(it) },\r\n                label = { Text(\"Email address\") },\r\n                placeholder = { Text(\"Enter your email\") },\r\n                modifier = Modifier\r\n                    .fillMaxWidth()\r\n                    .padding(bottom = 16.dp),\r\n                shape = RoundedCornerShape(16.dp),\r\n                colors = OutlinedTextFieldDefaults.colors(\r\n                    focusedBorderColor = MaterialTheme.colorScheme.primary,\r\n                    unfocusedBorderColor = MaterialTheme.colorScheme.outline,\r\n                ),\r\n                leadingIcon = {\r\n                    Icon(\r\n                        imageVector = Icons.Default.Email,\r\n                        contentDescription = \"Email\",\r\n                        tint = MaterialTheme.colorScheme.primary\r\n                    )\r\n                },\r\n                trailingIcon = {\r\n                    if (email.value.isNotEmpty()) {\r\n                        Icon(\r\n                            imageVector = if (isEmailValid) Icons.Outlined.CheckCircle else Icons.Outlined.Info,\r\n                            contentDescription = \"Email validation\",\r\n                            tint = if (isEmailValid) MaterialTheme.colorScheme.tertiary else MaterialTheme.colorScheme.error\r\n                        )\r\n                    }\r\n                },\r\n                keyboardOptions = KeyboardOptions(\r\n                    keyboardType = KeyboardType.Email,\r\n                    imeAction = ImeAction.Next\r\n                ),\r\n                singleLine = true,\r\n                isError = email.value.isNotEmpty() && !isEmailValid\r\n            )\r\n\r\n            // Password field with enhanced UI\r\n            OutlinedTextField(\r\n                value = password.value,\r\n                onValueChange = { viewModel.updatePassword(it) },\r\n                label = { Text(\"Password\") },\r\n                placeholder = { Text(\"Enter your password\") },\r\n                modifier = Modifier\r\n                    .fillMaxWidth()\r\n                    .padding(bottom = 8.dp),\r\n                shape = RoundedCornerShape(16.dp),\r\n                colors = OutlinedTextFieldDefaults.colors(\r\n                    focusedBorderColor = MaterialTheme.colorScheme.primary,\r\n                    unfocusedBorderColor = MaterialTheme.colorScheme.outline,\r\n                ),\r\n                visualTransformation = if (passwordVisible.value) VisualTransformation.None else PasswordVisualTransformation(),\r\n                keyboardOptions = KeyboardOptions(\r\n                    keyboardType = KeyboardType.Password,\r\n                    imeAction = ImeAction.Done\r\n                ),\r\n                leadingIcon = {\r\n                    Icon(\r\n                        imageVector = Icons.Default.Lock,\r\n                        contentDescription = \"Password\",\r\n                        tint = MaterialTheme.colorScheme.primary\r\n                    )\r\n                },\r\n                trailingIcon = {\r\n                    IconButton(onClick = { viewModel.togglePasswordVisibility() }) {\r\n                        Icon(\r\n                            imageVector = if (passwordVisible.value) Icons.Default.VisibilityOff else Icons.Default.Visibility,\r\n                            contentDescription = \"Toggle password visibility\",\r\n                            tint = MaterialTheme.colorScheme.onSurfaceVariant\r\n                        )\r\n                    }\r\n                },\r\n                singleLine = true\r\n            )\r\n\r\n            // Forgot password link with enhanced styling\r\n            Text(\r\n                text = \"Forgot password?\",\r\n                color = MaterialTheme.colorScheme.primary,\r\n                style = MaterialTheme.typography.bodyMedium.copy(\r\n                    fontWeight = FontWeight.Medium\r\n                ),\r\n                modifier = Modifier\r\n                    .align(Alignment.End)\r\n                    .clip(RoundedCornerShape(4.dp))\r\n                    .clickable { /* Handle forgot password */ }\r\n                    .padding(vertical = 4.dp, horizontal = 8.dp)\r\n            )\r\n\r\n            Spacer(modifier = Modifier.height(24.dp))\r\n\r\n            // Sign In button with animation\r\n            Button(\r\n                onClick = { viewModel.signIn() },\r\n                modifier = Modifier\r\n                    .fillMaxWidth()\r\n                    .height(56.dp),\r\n                shape = RoundedCornerShape(16.dp),\r\n                colors = ButtonDefaults.buttonColors(\r\n                    containerColor = MaterialTheme.colorScheme.primary\r\n                ),\r\n                enabled = email.value.isNotEmpty() && password.value.isNotEmpty()\r\n            ) {\r\n                AnimatedVisibility(visible = true) {\r\n                    Row(\r\n                        verticalAlignment = Alignment.CenterVertically,\r\n                        horizontalArrangement = Arrangement.Center\r\n                    ) {\r\n                        Text(\r\n                            \"Sign In\",\r\n                            style = MaterialTheme.typography.titleMedium.copy(\r\n                                fontWeight = FontWeight.Bold\r\n                            )\r\n                        )\r\n                        Icon(\r\n                            imageVector = Icons.Default.ArrowForward,\r\n                            contentDescription = \"Sign In\",\r\n                            modifier = Modifier.padding(start = 8.dp)\r\n                        )\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Other sign-in options with improved styling\r\n            Row(\r\n                modifier = Modifier\r\n                    .fillMaxWidth()\r\n                    .padding(vertical = 32.dp),\r\n                horizontalArrangement = Arrangement.Center,\r\n                verticalAlignment = Alignment.CenterVertically\r\n            ) {\r\n                Divider(\r\n                    modifier = Modifier.weight(1f),\r\n                    color = MaterialTheme.colorScheme.outline.copy(alpha = 0.5f)\r\n                )\r\n                Text(\r\n                    text = \"Or continue with\",\r\n                    style = MaterialTheme.typography.bodyMedium,\r\n                    color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                    modifier = Modifier.padding(horizontal = 16.dp)\r\n                )\r\n                Divider(\r\n                    modifier = Modifier.weight(1f),\r\n                    color = MaterialTheme.colorScheme.outline.copy(alpha = 0.5f)\r\n                )\r\n            }\r\n\r\n            // Social login options with matching style\r\n            Card(\r\n                modifier = Modifier\r\n                    .fillMaxWidth()\r\n                    .height(56.dp)\r\n                    .clip(RoundedCornerShape(16.dp))\r\n                    .clickable { onGoogleSignIn() },\r\n                shape = RoundedCornerShape(16.dp),\r\n                colors = CardDefaults.cardColors(\r\n                    containerColor = MaterialTheme.colorScheme.surface\r\n                ),\r\n                elevation = CardDefaults.cardElevation(\r\n                    defaultElevation = 2.dp\r\n                ),\r\n                border = BorderStroke(\r\n                    width = 1.dp,\r\n                    color = MaterialTheme.colorScheme.outline.copy(alpha = 0.5f)\r\n                )\r\n            ) {\r\n                Row(\r\n                    modifier = Modifier\r\n                        .fillMaxSize()\r\n                        .padding(horizontal = 16.dp),\r\n                    horizontalArrangement = Arrangement.Center,\r\n                    verticalAlignment = Alignment.CenterVertically\r\n                ) {\r\n                    Icon(\r\n                        painter = painterResource(id = R.drawable.google),\r\n                        contentDescription = \"Sign in with Google\",\r\n                        tint = Color.Unspecified,\r\n                        modifier = Modifier.size(24.dp)\r\n                    )\r\n                    Spacer(modifier = Modifier.width(12.dp))\r\n                    Text(\r\n                        text = \"Sign in with Google\",\r\n                        style = MaterialTheme.typography.titleSmall.copy(\r\n                            fontWeight = FontWeight.Medium\r\n                        )\r\n                    )\r\n                }\r\n            }\r\n\r\n            Spacer(modifier = Modifier.weight(1f))\r\n\r\n            // Don't have an account? Register link\r\n            Row(\r\n                modifier = Modifier\r\n                    .fillMaxWidth()\r\n                    .padding(vertical = 24.dp),\r\n                horizontalArrangement = Arrangement.Center,\r\n                verticalAlignment = Alignment.CenterVertically\r\n            ) {\r\n                Text(\r\n                    \"Don't have an account?\",\r\n                    style = MaterialTheme.typography.bodyMedium,\r\n                    color = MaterialTheme.colorScheme.onSurfaceVariant\r\n                )\r\n                Text(\r\n                    text = \"Register\",\r\n                    style = MaterialTheme.typography.bodyMedium.copy(\r\n                        fontWeight = FontWeight.SemiBold\r\n                    ),\r\n                    color = MaterialTheme.colorScheme.primary,\r\n                    modifier = Modifier\r\n                        .padding(start = 4.dp)\r\n                        .clickable { onRegisterClick() }\r\n                )\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/app/gmao_machines/ui/components/SignInContent.kt b/app/src/main/java/com/app/gmao_machines/ui/components/SignInContent.kt
--- a/app/src/main/java/com/app/gmao_machines/ui/components/SignInContent.kt	(revision 5174abd767f7bd1be1f2310b3f9010d9c715c724)
+++ b/app/src/main/java/com/app/gmao_machines/ui/components/SignInContent.kt	(date 1744970728113)
@@ -2,13 +2,11 @@
 
 import androidx.compose.animation.AnimatedVisibility
 import androidx.compose.animation.core.*
-import androidx.compose.animation.expandVertically
-import androidx.compose.animation.fadeIn
 import androidx.compose.foundation.BorderStroke
 import androidx.compose.foundation.background
-import androidx.compose.foundation.border
 import androidx.compose.foundation.clickable
 import androidx.compose.foundation.layout.*
+import androidx.compose.foundation.lazy.LazyColumn
 import androidx.compose.foundation.shape.CircleShape
 import androidx.compose.foundation.shape.RoundedCornerShape
 import androidx.compose.foundation.text.KeyboardOptions
@@ -21,7 +19,6 @@
 import androidx.compose.ui.Alignment
 import androidx.compose.ui.Modifier
 import androidx.compose.ui.draw.clip
-import androidx.compose.ui.graphics.Brush
 import androidx.compose.ui.graphics.Color
 import androidx.compose.ui.res.painterResource
 import androidx.compose.ui.text.font.FontWeight
